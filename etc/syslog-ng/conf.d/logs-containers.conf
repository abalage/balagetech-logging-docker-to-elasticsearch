@define elastic_host "172.18.0.10:9200"
@define elastic_user "user"
@define elastic_pass "password"

filter f_container {"${.journald.SYSLOG_IDENTIFIER}" eq "conmon"};

parser p_container_metadata {
    csv-parser(
        columns(PROGRAM,imagenameandtag,container.runtime)
        delimiters(chars("|"))
        template("${.journald.CONTAINER_TAG}") # ie. CONTAINER_TAG="nginx/nginx:1.16/podman"
    );
    csv-parser(
        columns(image.name,image.tag)
        delimiters(chars(":"))
        template("${imagenameandtag}")
    );
    map-value-pairs(
        pair("container.id",                "${.journald.CONTAINER_ID}")   # keyword
#        pair("container.labels",            "")    # not implemented in journald
        pair("container.name",              "${.journald.CONTAINER_NAME}") # keyword
        pair("container.image.tag",         list("${image.tag}")) # keyword, array
        pair("container.image.name",        "${image.name}") # keyword
        pair("event.action",                "container-log")
#        pair("event.category",              list("process")) # array, syslog does not fit into any category
        pair("event.dataset",               "container.log") # network.flow, network.dns, network.f2b
        pair("event.kind",                  "event")
        pair("event.module",                "container")
        pair("event.provider",              "journald")
        pair("event.type",                  "info") # fixed set of value
        pair("tags",                        list("syslog-ng"))
    );
};

template t_container {
    template("$(format_json --omit-empty-values --pair host.name=$HOST --pair host.ip=$SOURCEIP --pair @timestamp=$ISODATE --pair message=$MESSAGE --pair ecs.version=1.5.0 --key container.* --pair process.name=${PROGRAM} --key http.* --key user.* --key user_agent.* --key url.* --key source.* --key event.* tags=list($tags))\n");
};

destination d_container_file {
    file(
        "/var/log/container/$S_YEAR.$S_MONTH.$S_DAY/${.journald.CONTAINER_NAME}.log"
        create-dirs(yes)
    );
};

destination d_container_file_json {
    file(
        "/var/log/container/$S_YEAR.$S_MONTH.$S_DAY/${.journald.CONTAINER_NAME}.json"
        template("$(template t_container)")
        create-dirs(yes)
    );
};

destination d_elastic_container {
    elasticsearch-http(
        url("http://`elastic_host`/_bulk")
        index("containers-${S_YEAR}-${S_MONTH}")
        headers("Content-Type: application/x-ndjson")
        custom-id("")
        type("")
        workers(4)
        batch-lines(16)
        timeout(10)
        template("$(template t_container)")
        disk-buffer(
            mem-buf-length(10000)
            disk-buf-size(10000000)
            reliable(no)
        )
        persist-name("container")
        log-fifo-size(20000)
        user("`elastic_user`")
        password("`elastic_pass`")
    );
};

destination d_container {
    channel {
        parser(p_container_metadata);
        if ( "${PROGRAM}" eq "nginx" ) {
            parser(p_nginx);
        };
        parser { geoip_ecs(); };
        destination(d_container_file_json);
        destination(d_elastic_container);
    };
};
